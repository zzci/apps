#!/bin/bash

set -e

# Set the software versions
k3s_version="v1.27.1+k3s1"
cni_version="v1.2.0"
helm_version="v3.11.3"

# define the install config
k3s_binary="k3s"
basedir="/app/k3s"
distdir="$basedir/dist"
config_dir="$basedir/config"
cert_dir="$config_dir/certs"
install_dir="/usr/local/bin"
cni_dir="/opt/cni/bin"
k3s_config_dir="/etc/rancher/k3s"
k3s_lib_dir="/var/lib/rancher/k3s"
k3s_cert_dir="$k3s_lib_dir/server/tls"
k3s_images_dir="$k3s_lib_dir/agent/images"
tempdir=$(mktemp -d)

# List of files to download
download_files=(
    "https://github.com/k3s-io/k3s/releases/download/$k3s_version/k3s"
    "https://github.com/k3s-io/k3s/releases/download/$k3s_version/k3s-airgap-images-amd64.tar.gz"
    "https://github.com/containernetworking/plugins/releases/download/$cni_version/cni-plugins-linux-amd64-$cni_version.tgz"
    "https://github.com/k3s-io/k3s/raw/v1.27.1%2Bk3s1/install.sh"
    "https://github.com/k3s-io/k3s/raw/v1.27.1%2Bk3s1/contrib/util/generate-custom-ca-certs.sh"
    "https://github.com/k3s-io/k3s/raw/v1.27.1%2Bk3s1/contrib/util/check-config.sh"
    "https://get.helm.sh/helm-$helm_version-linux-amd64.tar.gz"
)

# prepare the dirs
mkdir -p $basedir/logs $distdir $k3s_config_dir $k3s_images_dir $install_dir $cni_dir $k3s_cert_dir $tempdir

# --- helper functions ---
info() {
    echo '[INFO] ' "$@"
}
warn() {
    echo '[WARN] ' "$@" >&2
}
fatal() {
    echo '[ERROR] ' "$@" >&2
    exit 1
}

# Check if either wget or curl is installed
downloader(){
    if command -v wget >/dev/null 2>&1; then
        echo "wget -qO"
    elif command -v curl >/dev/null 2>&1; then
        echo "curl -sSL -o"
    else
        fatal "Error: This script requires either wget or curl to be installed." >&2
    fi
}

# Download each file to the basedir
info 'Downloading files...'
for file in "${download_files[@]}"; do
    filename=$(basename "$file")
    filepath="$distdir/$filename"

    if [ -f "$filepath" ]; then
        echo "$filename already exists. Skipping download."
    else
        echo "Downloading $filename..."
        $(downloader) "$filepath" "$file"
    fi
done

# Prepare the helm
info 'Installing helm...'
tar -xzf $distdir/helm-$helm_version-linux-amd64.tar.gz -C $tempdir
mv "$tempdir/linux-amd64/helm" "$install_dir"

# Prepare the k3s
info 'Prepare k3s...'
cp $distdir/k3s-airgap-images-amd64.tar.gz $k3s_images_dir
cp $distdir/k3s $install_dir
cp $config_dir/config.yaml $k3s_config_dir/config.yaml

# Prepare the cni
info 'Installing cni...'
tar -xzf $distdir/cni-plugins-linux-amd64-$cni_version.tgz -C $cni_dir

# Prepare the binaries
chmod +x $cni_dir/* $install_dir/k3s $distdir/*.sh

# Prepare the certs
certs=(
    "root-ca.pem"
    "root-ca.key"
    "intermediate-ca.pem"
    "intermediate-ca.key"
)

info 'Installing certs...'
for cert in "${certs[@]}"; do
  [ -f "$cert_dir/$cert" ] && cp -a "$cert_dir/$cert" "$k3s_cert_dir";
done

$distdir/generate-custom-ca-certs.sh
rm -rf $k3s_cert_dir/intermediate* $k3s_cert_dir/root*

info 'Installing k3s...'
# Install k3s on the air-gapped machine
INSTALL_K3S_SKIP_START=true INSTALL_K3S_SKIP_DOWNLOAD=true $distdir/install.sh

# Prepare the uninstall script
echo "#!/bin/bash" > $basedir/bin/uninstall
echo "/usr/local/bin/k3s-uninstall.sh" >> $basedir/bin/uninstall
chmod +x $basedir/bin/uninstall

info 'Installation complete. Please run the following commands to start:'
echo "systemctl start k3s"
